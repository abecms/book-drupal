(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{134:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"default",(function(){return m}));var a=n(1),r=n(9),i=(n(0),n(159)),o={},l=[{value:"text list values of a field",id:"text-list-values-of-a-field",children:[{value:"Create a field in a form/ a pane form",id:"create-a-field-in-a-form-a-pane-form",children:[]}]}],c={id:"coding",title:"coding",description:"# Create a module",source:"@site/docs/coding.md",permalink:"/docs/coding"},s={rightToc:l,metadata:c},u="wrapper";function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(u,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"create-a-module"},"Create a module"),Object(i.b)("h1",{id:"site-settings"},"Site settings"),Object(i.b)("p",null,"To get the site_settings in a specific language, then get a specific group of site settings then a translated value of a specific key :"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$language = 'fr';\nif ($cache = \\Drupal::cache('site_settings')->get('settings'.':'.$language)) {\n    $site_settings = $cache->data;\n} else {\n    $site_settings = \\Drupal::service('site_settings.loader');\n    $site_settings->rebuildCache($language);\n    $cache = \\Drupal::cache('site_settings')->get('settings'.':'.$language);\n    $site_settings = $cache->data;\n}\n\n$cellarIntro = $site_settings['cellar_master_intro'];\nif (method_exists($cellarIntro, 'hasTranslation') && $cellarIntro->hasTranslation($language)) {\n    $cellarIntro = $cellarIntro->getTranslation($language);\n}\n$str = $cellarIntro['my-key']['value'];\n")),Object(i.b)("h1",{id:"node"},"Node"),Object(i.b)("h2",{id:"text-list-values-of-a-field"},"text list values of a field"),Object(i.b)("p",null,"text list is difficult to manipulate. It's easy to get the Id of the list, it's not that easy to get its label.\n1. get the id of the list : ",Object(i.b)("inlineCode",{parentName:"p"},"$valBlend = $krug_id_edition->get('field_blend')->value;"),"\n2. get the label of this id : ",Object(i.b)("inlineCode",{parentName:"p"},"$blend = $krug_id_edition->get('field_blend')->getSetting('allowed_values')[$valBlend];"),"\n3. If you want this label translated : ```if ($language !== \"en\") {\n$blend = \\Drupal::languageManager()->getLanguageConfigOverride($language, 'field.storage.node.field_blend')->get('settings')","['allowed_values'][$valBlend]","['label']",";\n}"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"\n## Use a template in a field\nImagine that you want to propose a text including variables corresponding to other values in the node. In our example, we want to write :\n'This wine is composed by X wines of Y different years'\nYou may create a text field in this form : 'This wine is composed by [X] wines of [Y] different years'\nfield X will be replaced with the 'field_number' field\nfield Y will be replaced with the 'field_years' field\n\n")),Object(i.b)("p",null,"$numberWines = $krug_id_edition->get('field_number')->value;\n$numberyears = $krug_id_edition->get('field_years')->value;\n$text = $krug_id_edition->get('field_text')->value;\n$text = str_replace('","[field_number_of_wines]","', $numberWines, $text);\n$text = str_replace('","[field_number_of_years]","', $numberyears, $text);"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"\nThis way, it's easy to compose complex sentences including 'token' of the node. In Twig, you can replace these values by creating a Twig function.\n\n# Drupal Commerce\n## Create a checkout pane\n- cf. https://docs.drupalcommerce.org/commerce2/developer-guide/checkout/create-custom-checkout-pane\n\n### What is a checkout pane ?\n1. It's a section you can place/replace in commerce checkout flows(form) section.\n1. Path => /admin/commerce/config/checkout-flows/manage/default\n\n### Create custom pane module\n1. name your custom module (example: my_checkout_pane)\n1. In this module create my_checkout_pane.info.yml fill it with your module infos :\n")),Object(i.b)("p",null,"name: My Checkout Pane\ntype: module\ndescription: Defines custom checkout panes.\ncore: 8.x\npackage: Custom"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"1. You can now create your php file in src/Plugin/Commerce/CheckoutPane/ and name it (example: CustomMessagePane.php):\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'<?php\n\nnamespace Drupal\\my_checkout_pane\\Plugin\\Commerce\\CheckoutPane;\n\nuse Drupal\\commerce_checkout\\Plugin\\Commerce\\CheckoutPane\\CheckoutPaneBase;\nuse Drupal\\Core\\Form\\FormStateInterface;\n\n/**\n * Provides a custom message pane.\n *\n * @CommerceCheckoutPane(\n *   id = "my_checkout_pane_custom_message",\n *   label = @Translation("Custom message"),\n * )\n */\nclass CustomMessagePane extends CheckoutPaneBase {\n\n  /**\n   * {@inheritdoc}\n   */\n  public function buildPaneForm(array $pane_form, FormStateInterface $form_state, array &$complete_form) {\n  }\n\n}\n')),Object(i.b)("h3",{id:"create-a-field-in-a-form-a-pane-form"},"Create a field in a form/ a pane form"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"To create a field in a form for example you have to use a form builder ",Object(i.b)("inlineCode",{parentName:"li"},"protect function buildForm(array $form, FormStateInterface $form_state, array &$complete_form)")),Object(i.b)("li",{parentName:"ol"},"Then in the region you want to add a field place the it.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Example for markup field :",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$form['message'] = [\n    '#markup' => $this->t('This is my custom message.'),\n];\n"))),Object(i.b)("li",{parentName:"ul"},"Example for textfield :",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$form['message'] = [\n  '#type' => 'textfield',\n  '#title' => $this->t('My text field'),\n  '#default_value' => 'This is a textfield',\n  '#size' => 60,\n];\n"))),Object(i.b)("li",{parentName:"ul"},"Example for checkbox field :",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"$form['checkField'] = [\n    '#type' => 'checkbox',\n    '#title' => t('New option checkbox'),\n    'required' => TRUE,\n    '#weight' => 10,\n];\n")))))}m.isMDXComponent=!0},159:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a),i=r.a.createContext({}),o=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=o(e.components);return r.a.createElement(i.Provider,{value:t},e.children)};var c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),u=o(n),m=a,d=u[l+"."+m]||u[m]||s[m]||i;return n?r.a.createElement(d,Object.assign({},{ref:t},c,{components:n})):r.a.createElement(d,Object.assign({},{ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);