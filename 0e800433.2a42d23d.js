(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{119:function(e,n,t){"use strict";t.d(n,"a",(function(){return i})),t.d(n,"b",(function(){return p}));var o=t(0),r=t.n(o),a=r.a.createContext({}),c=function(e){var n=r.a.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},i=function(e){var n=c(e.components);return r.a.createElement(a.Provider,{value:n},e.children)};var l="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=function(e,n){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===n.indexOf(o)&&(t[o]=e[o]);return t}(e,["components","mdxType","originalType","parentName"]),u=c(t),p=o,d=u[i+"."+p]||u[p]||s[p]||a;return t?r.a.createElement(d,Object.assign({},{ref:n},l,{components:t})):r.a.createElement(d,Object.assign({},{ref:n},l))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[l]="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=t[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},88:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"rightToc",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"default",(function(){return p}));var o=t(1),r=t(6),a=(t(0),t(119)),c={},i=[{value:"Cr\xe9er un token",id:"cr\xe9er-un-token",children:[]}],l={id:"tokens",title:"tokens",description:"# Tokens",source:"@site/docs/tokens.md",permalink:"/book-drupal/docs/tokens",sidebar:"docs",previous:{title:"taxonomies",permalink:"/book-drupal/docs/taxonomies"},next:{title:"images",permalink:"/book-drupal/docs/images"}},s={rightToc:i,metadata:l},u="wrapper";function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)(u,Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"tokens"},"Tokens"),Object(a.b)("h2",{id:"cr\xe9er-un-token"},"Cr\xe9er un token"),Object(a.b)("p",null,"expos\xe9 aux constructeurs de sites et rend ce qui se passe dans l'interface utilisateur. pour ce morceau de l'URL. Vous devez juste impl\xe9menter hook_token_info et hook_tokens."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"/**\n * Implements hook_token_info().\n */\nfunction MY_MODULE_token_info() {\n  $info['tokens']['node']['MY_TOKEN_ID'] = [\n    'name' => t('MY TOKEN LABEL'),\n    'description' => t('Return \"/global\" for nodes with the global checkbox checked, otherwise returns \"/local\".'),\n    'type' => 'url-fragment',\n  ];\n  return $info;\n}\n\n/**\n * Implements hook_tokens().\n */\nfunction MY_MODULE_tokens($type, $tokens, array $data, array $options, Drupal\\Core\\Render\\BubbleableMetadata $bubbleable_metadata) {\n  $replacements = [];\n  if ($type == 'node' && !empty($data['node']) && isset($tokens['MY_TOKEN_ID'])) {\n    $node = $data['node'];\n    $global_or_local = '/local';\n    if ($node->hasField('MY_GLOBAL_FIELD') && !empty($node->MY_GLOBAL_FIELD->value)) {\n      $global_or_local = '/global';\n    }\n    $replacements['[node:MY_TOKEN_ID]'] = $global_or_local;\n  }\n  return $replacements;\n}\n")))}p.isMDXComponent=!0}}]);